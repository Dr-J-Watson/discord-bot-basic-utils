version: "3.9"

# Définition des services nécessaires : la base Postgres et le bot Discord
services:
  db:
    image: postgres:15-alpine          # Image Postgres légère
    env_file:
      - .env                           # Charge POSTGRES_*
    environment:
      # On force les variables nécessaires pour Postgres (priorité à env_file, ici juste rappel si override futur)
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data  # Persistance des données
    healthcheck:                        # Vérifie que Postgres répond avant de lancer le bot
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  bot:
    build: .                            # Construit l'image locale via Dockerfile
    depends_on:
      db:
        condition: service_healthy      # Attend que la base soit prête
    env_file:
      - .env                            # Charge BOT_TOKEN, DATABASE_URL, POSTGRES_*
    environment:
      # On garde une valeur fallback si DATABASE_URL non calculée (rare car définie dans .env)
      DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:postgres@db:5432/postgres}
    volumes:
      - ./src:/app/src:ro               # Montage du code source en lecture seule (dev rapide)
    restart: unless-stopped             # Redémarre automatiquement sauf arrêt manuel

volumes:
  db_data:                              # Volume nommé pour Postgres
